{
	"InputAll": {
		"prefix": ["inputall"],
		"body": [
			"${1:I} = input()",
			"if ' ' not in ${1:I}:",
			"    if ${1:I}.isdigit():",
			"        ${1:I} = int(I)",
			"    elif float(I):",
			"        ${1:I} = float(I)",
			"else:",
			"    # ===== int =====",
			"    # A, B = map(int, ${1:I}.split())",
			"    # L = list(map(int, ${1:I}.split()))",
			"    # ===== str =====",
			"    # A, B = ${1:I}.split()",
			"    # L = ${1:I}.split()",
			"    # ===== float =====",
			"    # A, B = map(float, ${1:I}.split())",
			"    # L = list(map(float, ${1:I}.split()))$0"
		]
	},
	"InputInt": {
		"prefix": ["inputint"],
		"body": [
			"${1:I} = int(input())$0"
		]
	},
	"InputIntMap": {
		"prefix": ["inputintmap"],
		"body": [
			"${1:A, B} = map(int, input().split())$0"
		]
	},
	"InputIntList": {
		"prefix": ["inputintlist"],
		"body": [
			"${1:L} = list(map(int, input().split()))$0"
		]
	},
	"InputStr": {
		"prefix": ["inputstr"],
		"body": [
			"${1:I} = input()$0"
		]
	},
	"InputStrMap": {
		"prefix": ["inputstrmap"],
		"body": [
			"${1:A, B} = input().split()$0"
		]
	},
	"InputStrList": {
		"prefix": ["inputstrlist"],
		"body": [
			"${1:L} = input().split()$0"
		]
	},
	"InputFloat": {
		"prefix": ["inputfloat"],
		"body": [
			"${1:I} = float(input())$0"
		]
	},
	"InputFloatMap": {
		"prefix": ["inputfloatmap"],
		"body": [
			"${1:A, B} = map(float, input().split()) $2"
		]
	},
	"InputFloatList": {
		"prefix": ["inputfloatlist"],
		"body": [
			"${1:L} = list(map(float, input().split()))$0"
		]
	},
	"Print": {
		"prefix": ["print"],
		"body": [
			"print($1, ${2:flush=True})$0"
		]
	},
	"AlphabetNth": {
		"prefix": ["alphabetnth"],
		"body": [
			"${1:S} = [chr(ord('a') + i) for i in range(${2:10})]$0"
		]
	},
	"Def": {
		"prefix": ["def"],
		"body": [
			"def ${1:defname}($2):",
			"    $0"
		]
	},
	"Quicksort": {
		"prefix": ["quicksort"],
		"body": [
			"def quicksort(l):",
			"    if len(l) <= 1:",
			"        return l",
			"    else:",
   			"        pivot = l.pop()",
   			"        greater, lesser = [], []",
   			"        for el in l:",
   			"            if el > pivot:",
   			"                greater.append(el)",
   			"            else:",
   			"                lesser.append(el)",
   			"                return quicksort(lesser) + [pivot] + quicksort(greater)"
		]
	}
}
